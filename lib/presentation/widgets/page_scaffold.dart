import 'dart:math' as math;
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';

import '../pages/chat/coach_chat_page.dart';
import 'chat/coach_chat_fab.dart';

class PageScaffold extends StatelessWidget {
  final Widget body;
  final PreferredSizeWidget? appBar;
  final Widget? bottomNavigationBar;

  /// –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–µ–ª—ë–Ω—ã–π –ø—É–∑—ã—Ä—ë–∫?
  final bool showCoachFab;

  /// ¬´–ß–∏—Å—Ç–∞—è¬ª –≤—ã—Å–æ—Ç–∞ –Ω–∞–≤–±–∞—Ä–∞ (–±–µ–∑ safe area —Å–Ω–∏–∑—É).
  /// –ù—É–∂–Ω–∞, —á—Ç–æ–±—ã –ø–æ–¥–Ω—è—Ç—å FAB —Ä–æ–≤–Ω–æ –Ω–∞ 8dp –Ω–∞–¥ –≤–µ—Ä—Ö–æ–º –±–∞—Ä–∞.
  final double bottomBarCoreHeight;

  const PageScaffold({
    super.key,
    required this.body,
    this.appBar,
    this.bottomNavigationBar,
    this.showCoachFab = false,
    this.bottomBarCoreHeight = 0,
  });

  @override
  Widget build(BuildContext context) {
    final safeBottom = MediaQuery.of(context).padding.bottom;
    // FAB –±—É–¥–µ—Ç –Ω–∞ 8dp –≤—ã—à–µ –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫—Ä–∞—è –±–∞—Ä–∞: safe + core + 8
    final fabBottom = math.max(0.0, safeBottom) + bottomBarCoreHeight + 8.0.h;

    return Scaffold(
      appBar: appBar,
      bottomNavigationBar: bottomNavigationBar,
      body: Stack(
        children: [
          Positioned.fill(child: body),

          // –°—Ç—Ä–æ–≥–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–∞-—Å–Ω–∏–∑—É
          Positioned(
            right: 16.w,
            bottom: fabBottom,
            child: CoachChatFabButton(
              visible: showCoachFab,
              onTap: () async {
                final user = FirebaseAuth.instance.currentUser;
                if (user == null) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                      content: Text('–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç'),
                      behavior: SnackBarBehavior.floating,
                    ),
                  );
                  return;
                }

                final chatId = await _ensureCoachChatForUid(user.uid);
                if (!context.mounted) return;

                Navigator.of(context).push(
                  MaterialPageRoute(
                    builder: (_) => CoachChatPage(chatId: chatId),
                    settings: const RouteSettings(name: '/coach-chat'),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

Future<String> _ensureCoachChatForUid(String uid) async {
  final db = FirebaseFirestore.instance;

  final existing = await db
      .collection('chats')
      .where('participants', arrayContains: uid)
      .limit(1)
      .get();

  if (existing.docs.isNotEmpty) return existing.docs.first.id;

  final doc = await db.collection('chats').add({
    'participants': [uid],
    'title': '–î–∏–∞–ª–æ–≥ —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º',
    'createdAt': FieldValue.serverTimestamp(),
  });

  await db.collection('chats/${doc.id}/messages').add({
    'role': 'assistant',
    'text':
    '–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ç—Ä–µ–Ω–µ—Ä-–±–æ—Ç. –°–ø—Ä–æ—Å–∏ –ø—Ä–æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –º–∞—Ç—á–∏ üòä',
    'senderId': 'coach-bot',
    'createdAt': FieldValue.serverTimestamp(),
  });

  return doc.id;
}
